
Proyecto__2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000c56  00000cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  00000cec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000d60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011db  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  00002063  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab6  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c9  00000000  00000000  00003b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003f48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  9e:	0c 94 29 06 	jmp	0xc52	; 0xc52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
 */ 

#include "ADC.h"

void initADC(void){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	//Voltaje de referencia = 5V
	ADMUX |= (1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	//justificado a la izquierda
	ADMUX |= (1<<ADLAR);
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADCSRA = 0;
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	//Habilitar ADC
	ADCSRA |= (1<<ADEN);
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
	//Máscara ADC
	ADCSRA |= (1<<ADIE);
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	//Prescaler a 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  ca:	80 81       	ld	r24, Z
  cc:	87 60       	ori	r24, 0x07	; 7
  ce:	80 83       	st	Z, r24
	
	ADCSRB = 0;
  d0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	
	DIDR0 |= (1<<ADC0D) | (1<<ADC1D) | (1<<ADC2D) | (1<<ADC3D);
  d4:	ae e7       	ldi	r26, 0x7E	; 126
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	8c 91       	ld	r24, X
  da:	8f 60       	ori	r24, 0x0F	; 15
  dc:	8c 93       	st	X, r24
	
	
	//Iniciar primera conversión
	ADCSRA |= (1<<ADSC);
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <mapADCtoServo1>:

void setup(void);

//----------------------------MAPEOS-------------------------------------------------
uint16_t mapADCtoServo1(uint8_t valor_ADC1){
	return (uint16_t)(((float)valor_ADC1/255)*(149.88-37.47)+37.47);
  e6:	68 2f       	mov	r22, r24
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	4f e7       	ldi	r20, 0x7F	; 127
  f8:	53 e4       	ldi	r21, 0x43	; 67
  fa:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
  fe:	2c ee       	ldi	r18, 0xEC	; 236
 100:	31 ed       	ldi	r19, 0xD1	; 209
 102:	40 ee       	ldi	r20, 0xE0	; 224
 104:	52 e4       	ldi	r21, 0x42	; 66
 106:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
 10a:	28 e4       	ldi	r18, 0x48	; 72
 10c:	31 ee       	ldi	r19, 0xE1	; 225
 10e:	45 e1       	ldi	r20, 0x15	; 21
 110:	52 e4       	ldi	r21, 0x42	; 66
 112:	0e 94 0b 04 	call	0x816	; 0x816 <__addsf3>
 116:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
}
 11a:	cb 01       	movw	r24, r22
 11c:	08 95       	ret

0000011e <mapADCtoServo2>:

uint16_t mapADCtoServo2(uint8_t valor_ADC2){
	return (uint16_t)(((float)valor_ADC2/255)*(149.88-37.47)+37.47);
 11e:	68 2f       	mov	r22, r24
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	4f e7       	ldi	r20, 0x7F	; 127
 130:	53 e4       	ldi	r21, 0x43	; 67
 132:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
 136:	2c ee       	ldi	r18, 0xEC	; 236
 138:	31 ed       	ldi	r19, 0xD1	; 209
 13a:	40 ee       	ldi	r20, 0xE0	; 224
 13c:	52 e4       	ldi	r21, 0x42	; 66
 13e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
 142:	28 e4       	ldi	r18, 0x48	; 72
 144:	31 ee       	ldi	r19, 0xE1	; 225
 146:	45 e1       	ldi	r20, 0x15	; 21
 148:	52 e4       	ldi	r21, 0x42	; 66
 14a:	0e 94 0b 04 	call	0x816	; 0x816 <__addsf3>
 14e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
}
 152:	cb 01       	movw	r24, r22
 154:	08 95       	ret

00000156 <mapADCtoServo3>:

uint8_t mapADCtoServo3(uint8_t valor_ADC3){
	return (uint8_t)(((float)valor_ADC3/255)*(31-5)+5);
 156:	68 2f       	mov	r22, r24
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	4f e7       	ldi	r20, 0x7F	; 127
 168:	53 e4       	ldi	r21, 0x43	; 67
 16a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 ed       	ldi	r20, 0xD0	; 208
 174:	51 e4       	ldi	r21, 0x41	; 65
 176:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 ea       	ldi	r20, 0xA0	; 160
 180:	50 e4       	ldi	r21, 0x40	; 64
 182:	0e 94 0b 04 	call	0x816	; 0x816 <__addsf3>
 186:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
 18a:	86 2f       	mov	r24, r22
}
 18c:	08 95       	ret

0000018e <mapADCtoServo4>:

uint8_t mapADCtoServo4(uint8_t valor_ADC4){
	return (uint8_t)(((float)valor_ADC4/255)*(31-5)+5);
 18e:	68 2f       	mov	r22, r24
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	4f e7       	ldi	r20, 0x7F	; 127
 1a0:	53 e4       	ldi	r21, 0x43	; 67
 1a2:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 ed       	ldi	r20, 0xD0	; 208
 1ac:	51 e4       	ldi	r21, 0x41	; 65
 1ae:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 ea       	ldi	r20, 0xA0	; 160
 1b8:	50 e4       	ldi	r21, 0x40	; 64
 1ba:	0e 94 0b 04 	call	0x816	; 0x816 <__addsf3>
 1be:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
 1c2:	86 2f       	mov	r24, r22
}
 1c4:	08 95       	ret

000001c6 <config_pines>:

//----------------------------FUNCIONES-------------------------------------------------
void config_pines(void){
	//Botones:
	//Cambio de modo
	DDRC &= ~(1 << DDC2);
 1c6:	87 b1       	in	r24, 0x07	; 7
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	87 b9       	out	0x07, r24	; 7
	PORTB |= (1 << PORTC2);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	85 b9       	out	0x05, r24	; 5
	
	//Cambiar la localidad
	DDRC &= ~(1 << DDC3);
 1d2:	87 b1       	in	r24, 0x07	; 7
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	87 b9       	out	0x07, r24	; 7
	PORTB |= (1 << PORTC3);
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	85 b9       	out	0x05, r24	; 5
	

	//Guardar la localidad
	DDRC &= ~(1 << DDC1);
 1de:	87 b1       	in	r24, 0x07	; 7
 1e0:	8d 7f       	andi	r24, 0xFD	; 253
 1e2:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC1);
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	88 b9       	out	0x08, r24	; 8
	
	//LEDS
	DDRD |= (1 << DDD7) | (1 << DDD4) | (1 << DDD2) | (1 << DDD5) | (1 << DDD6);
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	84 6f       	ori	r24, 0xF4	; 244
 1ee:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << DDB4) | (1 << DDB5);
 1f0:	84 b1       	in	r24, 0x04	; 4
 1f2:	80 63       	ori	r24, 0x30	; 48
 1f4:	84 b9       	out	0x04, r24	; 4
	
	//Interrupciones
	PCICR |= (1 << PCIE2) | (1 << PCIE1)| (1 << PCIE0);
 1f6:	e8 e6       	ldi	r30, 0x68	; 104
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT9)	| (1 << PCINT10) | (1 << PCINT11); // PC0
 200:	ec e6       	ldi	r30, 0x6C	; 108
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	8e 60       	ori	r24, 0x0E	; 14
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <leds_memoria>:
	
}


void leds_memoria (void){
	if (memoria == 0)
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 210:	81 11       	cpse	r24, r1
 212:	0a c0       	rjmp	.+20     	; 0x228 <leds_memoria+0x1c>
	{
		PORTB |= (1 << PINB5);
 214:	85 b1       	in	r24, 0x05	; 5
 216:	80 62       	ori	r24, 0x20	; 32
 218:	85 b9       	out	0x05, r24	; 5
		PORTD &= ~(1 << PIND6);
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 7b       	andi	r24, 0xBF	; 191
 21e:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << PINB4);
 220:	85 b1       	in	r24, 0x05	; 5
 222:	8f 7e       	andi	r24, 0xEF	; 239
 224:	85 b9       	out	0x05, r24	; 5
 226:	08 95       	ret
	}
	else if (memoria == 1)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	39 f4       	brne	.+14     	; 0x23a <leds_memoria+0x2e>
	{
		PORTD |= (1 << PIND6);
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	8b b9       	out	0x0b, r24	; 11
		/*PORTD &= ~(1 << PIND5);*/
		PORTB &= ~(1 << PINB4) & ~(1 << PIND5);
 232:	85 b1       	in	r24, 0x05	; 5
 234:	8f 7c       	andi	r24, 0xCF	; 207
 236:	85 b9       	out	0x05, r24	; 5
 238:	08 95       	ret
	}
	else if (memoria == 2)
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	51 f4       	brne	.+20     	; 0x252 <leds_memoria+0x46>
	{
		PORTB |= (1 << PINB4);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	80 61       	ori	r24, 0x10	; 16
 242:	85 b9       	out	0x05, r24	; 5
		PORTD &= ~(1 << PIND6) /*/& ~(1 << PIND5)/*/;
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8f 7b       	andi	r24, 0xBF	; 191
 248:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << PINB5);
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	85 b9       	out	0x05, r24	; 5
 250:	08 95       	ret
	}
	else if (memoria == 3)
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	49 f4       	brne	.+18     	; 0x268 <leds_memoria+0x5c>
	{
		PORTD |= (1 << PIND6)/*/| (1<<PIND5)/*/;
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PINB5);
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	80 62       	ori	r24, 0x20	; 32
 260:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PINB4);
 262:	85 b1       	in	r24, 0x05	; 5
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	85 b9       	out	0x05, r24	; 5
 268:	08 95       	ret

0000026a <setup>:



//----------------------------SETUP-------------------------------------------------
void setup(void){
	cli();
 26a:	f8 94       	cli
	DDRC = 0;
 26c:	17 b8       	out	0x07, r1	; 7
	init_PWM1_FAST();
 26e:	0e 94 c2 03 	call	0x784	; 0x784 <init_PWM1_FAST>
	init_PWM2_FAST();
 272:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <init_PWM2_FAST>
	//leds_memoria();
	
	initADC();
 276:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
 27a:	78 94       	sei
 27c:	08 95       	ret

0000027e <main>:


//----------------------------MAIN-------------------------------------------------
int main(void)
{
    CLKPR = (1<<CLKPCE);
 27e:	e1 e6       	ldi	r30, 0x61	; 97
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	80 83       	st	Z, r24
    CLKPR = (1<<CLKPS1); // CLK a 4 MHz
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 83       	st	Z, r24
	setup();
 28a:	0e 94 35 01 	call	0x26a	; 0x26a <setup>
	config_pines();
 28e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <config_pines>
    while (1) 
    {
		ADCSRA |= (1 << ADSC);  // Iniciar conversión
 292:	ea e7       	ldi	r30, 0x7A	; 122
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	84 e3       	ldi	r24, 0x34	; 52
 2a0:	9c e0       	ldi	r25, 0x0C	; 12
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x24>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x2e>
 2ac:	00 00       	nop
		_delay_ms(1000);
		if (modo == 0)
 2ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <modo>
 2b2:	81 11       	cpse	r24, r1
 2b4:	ee cf       	rjmp	.-36     	; 0x292 <main+0x14>
		{
			PORTD |= (1 << PIND2);
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << PIND4) & ~(1 << PIND7);
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	8f 76       	andi	r24, 0x6F	; 111
 2c0:	8b b9       	out	0x0b, r24	; 11
			dutyCycle1 = mapADCtoServo1(valor_pot1);
 2c2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <valor_pot1>
 2c6:	0e 94 73 00 	call	0xe6	; 0xe6 <mapADCtoServo1>
 2ca:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <dutyCycle1+0x1>
 2ce:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <dutyCycle1>
			updateDutyCicle1A(dutyCycle1);
 2d2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <updateDutyCicle1A>
			
			
			dutyCycle2 = mapADCtoServo2(valor_pot2);
 2d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <valor_pot2>
 2da:	0e 94 8f 00 	call	0x11e	; 0x11e <mapADCtoServo2>
 2de:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <dutyCycle2>
			updateDutyCicle1B(dutyCycle2);
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <updateDutyCicle1B>
			
			
			dutyCycle3 = mapADCtoServo3(valor_pot3);
 2e8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <valor_pot3>
 2ec:	0e 94 ab 00 	call	0x156	; 0x156 <mapADCtoServo3>
 2f0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dutyCycle3>
			updateDutyCicle2A(dutyCycle3);
 2f4:	0e 94 04 04 	call	0x808	; 0x808 <updateDutyCicle2A>
			
			
			dutyCycle4 = mapADCtoServo4(valor_pot4);
 2f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <valor_pot4>
 2fc:	0e 94 c7 00 	call	0x18e	; 0x18e <mapADCtoServo4>
 300:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <dutyCycle4>
			updateDutyCicle2B(dutyCycle4);
 304:	0e 94 07 04 	call	0x80e	; 0x80e <updateDutyCicle2B>
 308:	c4 cf       	rjmp	.-120    	; 0x292 <main+0x14>

0000030a <__vector_21>:
}
//----------------------------------------------------------------------------------


//----------------------------INTERRUPCIONES-------------------------------------------------
ISR(ADC_vect){
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	8f 93       	push	r24
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	ADCSRA &= ~(1<<ADEN);
 31a:	ea e7       	ldi	r30, 0x7A	; 122
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	80 83       	st	Z, r24
	if (alternador_pots == 0)
 324:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alternador_pots>
 328:	81 11       	cpse	r24, r1
 32a:	0f c0       	rjmp	.+30     	; 0x34a <__vector_21+0x40>
	{
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | ((1<<MUX2)|(1<<MUX1)|(1<<MUX0)));
 32c:	ec e7       	ldi	r30, 0x7C	; 124
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	87 60       	ori	r24, 0x07	; 7
 334:	80 83       	st	Z, r24
		valor_pot1 = ADCH;
 336:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 33a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <valor_pot1>
		alternador_pots +=1;
 33e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alternador_pots>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alternador_pots>
 348:	32 c0       	rjmp	.+100    	; 0x3ae <__vector_21+0xa4>
	}
	else if (alternador_pots == 1)
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	81 f4       	brne	.+32     	; 0x36e <__vector_21+0x64>
	{
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | ((1<<MUX2)|(1<<MUX1)));
 34e:	ec e7       	ldi	r30, 0x7C	; 124
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	88 7f       	andi	r24, 0xF8	; 248
 356:	86 60       	ori	r24, 0x06	; 6
 358:	80 83       	st	Z, r24
		valor_pot2 = ADCH;
 35a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 35e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valor_pot2>
		alternador_pots +=1;
 362:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alternador_pots>
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alternador_pots>
 36c:	20 c0       	rjmp	.+64     	; 0x3ae <__vector_21+0xa4>
	}
	else if (alternador_pots == 2)
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	81 f4       	brne	.+32     	; 0x392 <__vector_21+0x88>
	{
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | ((1<<MUX2)|(1<<MUX0)));
 372:	ec e7       	ldi	r30, 0x7C	; 124
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	88 7f       	andi	r24, 0xF8	; 248
 37a:	85 60       	ori	r24, 0x05	; 5
 37c:	80 83       	st	Z, r24
		valor_pot3 = ADCH;
 37e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 382:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <valor_pot3>
		alternador_pots +=1;
 386:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alternador_pots>
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alternador_pots>
 390:	0e c0       	rjmp	.+28     	; 0x3ae <__vector_21+0xa4>
	}
	else if (alternador_pots == 3)
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	61 f4       	brne	.+24     	; 0x3ae <__vector_21+0xa4>
	{
		ADMUX = ((ADMUX & ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0))) | (1<<MUX2));
 396:	ec e7       	ldi	r30, 0x7C	; 124
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	88 7f       	andi	r24, 0xF8	; 248
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	80 83       	st	Z, r24
		valor_pot4 = ADCH;
 3a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valor_pot4>
		alternador_pots = 0;
 3aa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <alternador_pots>
	}
	ADCSRA |= (1<<ADEN);
 3ae:	ea e7       	ldi	r30, 0x7A	; 122
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 3b8:	80 81       	ld	r24, Z
 3ba:	80 64       	ori	r24, 0x40	; 64
 3bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIF);
 3be:	80 81       	ld	r24, Z
 3c0:	80 61       	ori	r24, 0x10	; 16
 3c2:	80 83       	st	Z, r24

}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	8f 91       	pop	r24
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_4>:

ISR (PCINT1_vect){
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
	if (!(PINC & (1 << PINC3)))
 3f6:	33 99       	sbic	0x06, 3	; 6
 3f8:	41 c0       	rjmp	.+130    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3fa:	2f e7       	ldi	r18, 0x7F	; 127
 3fc:	88 e3       	ldi	r24, 0x38	; 56
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	21 50       	subi	r18, 0x01	; 1
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	{
		_delay_ms(100);
		if (!(PINC & (1 << PINC3))) //BOTON 1, CAMBIO DE MODO
 40c:	33 99       	sbic	0x06, 3	; 6
 40e:	36 c0       	rjmp	.+108    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		{
			if (modo == 0) //MODO MANUAL, GUARDAR, CAMBIAR DE LOCACION
 410:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <modo>
 414:	81 11       	cpse	r24, r1
 416:	0c c0       	rjmp	.+24     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			{
				PORTD |= (1 << PIND2);
 418:	8b b1       	in	r24, 0x0b	; 11
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1 << PIND4) & ~(1 << PIND7);
 41e:	8b b1       	in	r24, 0x0b	; 11
 420:	8f 76       	andi	r24, 0x6F	; 111
 422:	8b b9       	out	0x0b, r24	; 11
				modo +=1;
 424:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <modo>
 428:	8f 5f       	subi	r24, 0xFF	; 255
 42a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <modo>
 42e:	26 c0       	rjmp	.+76     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			}
			else if (modo == 1) //MODO EEPROM, SUBIR VALORES A SERVOS
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	61 f4       	brne	.+24     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
			{
				PORTD |= (1 << PIND7);
 434:	8b b1       	in	r24, 0x0b	; 11
 436:	80 68       	ori	r24, 0x80	; 128
 438:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1 << PIND2) & ~(1 << PIND4);
 43a:	8b b1       	in	r24, 0x0b	; 11
 43c:	8b 7e       	andi	r24, 0xEB	; 235
 43e:	8b b9       	out	0x0b, r24	; 11
				modo +=1;
 440:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <modo>
 444:	8f 5f       	subi	r24, 0xFF	; 255
 446:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <modo>
 44a:	18 c0       	rjmp	.+48     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			}
			else if (modo == 2)//ADAFRUIT, UART PRACTICAMENTE, MOVER SERVOS, GUARDAR, CAMBIAR LOCACION
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	61 f4       	brne	.+24     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			{
				PORTD |= (1 << PIND4);
 450:	8b b1       	in	r24, 0x0b	; 11
 452:	80 61       	ori	r24, 0x10	; 16
 454:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1 << PIND2) & ~(1 << PIND7);
 456:	8b b1       	in	r24, 0x0b	; 11
 458:	8b 77       	andi	r24, 0x7B	; 123
 45a:	8b b9       	out	0x0b, r24	; 11
				modo +=1;
 45c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <modo>
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <modo>
 466:	0a c0       	rjmp	.+20     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				/*/modo = 0;/*/
			}
			else if (modo ==3)//ADAFRUIT, SUBIR VALORES A SERVOS
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	41 f4       	brne	.+16     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				PORTD |= (1 << PIND2) | (1 << PIND7);
 46c:	8b b1       	in	r24, 0x0b	; 11
 46e:	84 68       	ori	r24, 0x84	; 132
 470:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1 << PIND4);
 472:	8b b1       	in	r24, 0x0b	; 11
 474:	8f 7e       	andi	r24, 0xEF	; 239
 476:	8b b9       	out	0x0b, r24	; 11
				modo = 0;
 478:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <modo>
		}
	}
	
	
	
	if (!(PINC & (1 << PINC2)))//BOTON 2, CAMBIA LA LOCALIDAD
 47c:	32 99       	sbic	0x06, 2	; 6
 47e:	1a c0       	rjmp	.+52     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 480:	2f e7       	ldi	r18, 0x7F	; 127
 482:	88 e3       	ldi	r24, 0x38	; 56
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
	{
		_delay_ms(100);
		if (!(PINC & (1 << PINC2)))
 492:	32 99       	sbic	0x06, 2	; 6
 494:	0f c0       	rjmp	.+30     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
		{
			// 		if ((modo == 0) | (modo == 1))
			// 		{
			if (memoria == 4)
 496:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 49a:	84 30       	cpi	r24, 0x04	; 4
 49c:	31 f4       	brne	.+12     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			{
				memoria = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				leds_memoria();
 4a4:	0e 94 06 01 	call	0x20c	; 0x20c <leds_memoria>
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
			}
			else{
				memoria++;
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				leds_memoria();
 4b0:	0e 94 06 01 	call	0x20c	; 0x20c <leds_memoria>
			/*/}/*/
		}
	}

	
	if (!(PINC & (1 << PINC1)))
 4b4:	31 99       	sbic	0x06, 1	; 6
 4b6:	55 c1       	rjmp	.+682    	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
	{
		if (modo == 0)
 4b8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <modo>
 4bc:	81 11       	cpse	r24, r1
 4be:	a6 c0       	rjmp	.+332    	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
		{
			if (memoria == 1){
 4c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	29 f5       	brne	.+74     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
				eeprom_write_byte((uint8_t*)0, OCR1A);
 4c8:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4cc:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)1, OCR1B);
 4d8:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 4dc:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)2, OCR2A);
 4e8:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)3, OCR2B);
 4f4:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 4f8:	83 e0       	ldi	r24, 0x03	; 3
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
 500:	2f e7       	ldi	r18, 0x7F	; 127
 502:	8a e1       	ldi	r24, 0x1A	; 26
 504:	96 e0       	ldi	r25, 0x06	; 6
 506:	21 50       	subi	r18, 0x01	; 1
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	90 40       	sbci	r25, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 510:	00 00       	nop
				_delay_ms(500);
				/*/leds_memoria();/*/
			}
			
			if (memoria == 2){
 512:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	29 f5       	brne	.+74     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
				eeprom_write_byte((uint8_t*)4, OCR1A);
 51a:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 51e:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 522:	84 e0       	ldi	r24, 0x04	; 4
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)5, OCR1B);
 52a:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 52e:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 532:	85 e0       	ldi	r24, 0x05	; 5
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)6, OCR2A);
 53a:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 53e:	86 e0       	ldi	r24, 0x06	; 6
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)7, OCR2B);
 546:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 54a:	87 e0       	ldi	r24, 0x07	; 7
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
 552:	2f e7       	ldi	r18, 0x7F	; 127
 554:	8a e1       	ldi	r24, 0x1A	; 26
 556:	96 e0       	ldi	r25, 0x06	; 6
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 560:	00 c0       	rjmp	.+0      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 562:	00 00       	nop
				_delay_ms(500);
				/*/leds_memoria();/*/
			}
			
			if (memoria == 3){
 564:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 568:	83 30       	cpi	r24, 0x03	; 3
 56a:	29 f5       	brne	.+74     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
				eeprom_write_byte((uint8_t*)8, OCR1A);
 56c:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 570:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 574:	88 e0       	ldi	r24, 0x08	; 8
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)9, OCR1B);
 57c:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 580:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 584:	89 e0       	ldi	r24, 0x09	; 9
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)10, OCR2A);
 58c:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 590:	8a e0       	ldi	r24, 0x0A	; 10
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)11, OCR2B);
 598:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 59c:	8b e0       	ldi	r24, 0x0B	; 11
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
 5a4:	2f e7       	ldi	r18, 0x7F	; 127
 5a6:	8a e1       	ldi	r24, 0x1A	; 26
 5a8:	96 e0       	ldi	r25, 0x06	; 6
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 5b4:	00 00       	nop
				_delay_ms(500);
				/*/leds_memoria();/*/
			}
			
			if (memoria == 4){
 5b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5ba:	84 30       	cpi	r24, 0x04	; 4
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 5be:	d1 c0       	rjmp	.+418    	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
				eeprom_write_byte((uint8_t*)12, OCR1A);
 5c0:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 5c4:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5c8:	8c e0       	ldi	r24, 0x0C	; 12
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)13, OCR1B);
 5d0:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 5d4:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 5d8:	8d e0       	ldi	r24, 0x0D	; 13
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)14, OCR2A);
 5e0:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 5e4:	8e e0       	ldi	r24, 0x0E	; 14
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)15, OCR2B);
 5ec:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 5f0:	8f e0       	ldi	r24, 0x0F	; 15
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 1b 06 	call	0xc36	; 0xc36 <eeprom_write_byte>
 5f8:	2f e7       	ldi	r18, 0x7F	; 127
 5fa:	8a e1       	ldi	r24, 0x1A	; 26
 5fc:	96 e0       	ldi	r25, 0x06	; 6
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 606:	00 c0       	rjmp	.+0      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 608:	00 00       	nop
 60a:	ab c0       	rjmp	.+342    	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
				_delay_ms(500);
				/*/leds_memoria();/*/
			}
		}
		else if (modo == 1){
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	09 f0       	breq	.+2      	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
 610:	a8 c0       	rjmp	.+336    	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
			if (memoria == 1){
 612:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	31 f5       	brne	.+76     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
				valor_eeprom = eeprom_read_byte((uint8_t*)0);
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 622:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1A = valor_eeprom;
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 62c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				valor_eeprom = eeprom_read_byte((uint8_t*)1);
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 638:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1B = valor_eeprom;
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 642:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				valor_eeprom = eeprom_read_byte((uint8_t*)2);
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 64e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2A = valor_eeprom;
 652:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				valor_eeprom = eeprom_read_byte((uint8_t*)3);
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 65e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2B = valor_eeprom;
 662:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				/*/leds_memoria();/*/
			}
			
			if (memoria == 2){
 666:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	31 f5       	brne	.+76     	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
				valor_eeprom = eeprom_read_byte((uint8_t*)4);
 66e:	84 e0       	ldi	r24, 0x04	; 4
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 676:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1A = valor_eeprom;
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 680:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				valor_eeprom = eeprom_read_byte((uint8_t*)5);
 684:	85 e0       	ldi	r24, 0x05	; 5
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 68c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1B = valor_eeprom;
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 696:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				valor_eeprom = eeprom_read_byte((uint8_t*)6);
 69a:	86 e0       	ldi	r24, 0x06	; 6
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 6a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2A = valor_eeprom;
 6a6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				valor_eeprom = eeprom_read_byte((uint8_t*)7);
 6aa:	87 e0       	ldi	r24, 0x07	; 7
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 6b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2B = valor_eeprom;
 6b6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				/*/leds_memoria();/*/
			}
			
			if (memoria == 3){
 6ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6be:	83 30       	cpi	r24, 0x03	; 3
 6c0:	31 f5       	brne	.+76     	; 0x70e <__EEPROM_REGION_LENGTH__+0x30e>
				valor_eeprom = eeprom_read_byte((uint8_t*)8);
 6c2:	88 e0       	ldi	r24, 0x08	; 8
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 6ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1A = valor_eeprom;
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				valor_eeprom = eeprom_read_byte((uint8_t*)9);
 6d8:	89 e0       	ldi	r24, 0x09	; 9
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 6e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1B = valor_eeprom;
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				valor_eeprom = eeprom_read_byte((uint8_t*)10);
 6ee:	8a e0       	ldi	r24, 0x0A	; 10
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 6f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2A = valor_eeprom;
 6fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				valor_eeprom = eeprom_read_byte((uint8_t*)11);
 6fe:	8b e0       	ldi	r24, 0x0B	; 11
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 706:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2B = valor_eeprom;
 70a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				/*/leds_memoria();/*/
			}
			
			if (memoria == 4){
 70e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 712:	84 30       	cpi	r24, 0x04	; 4
 714:	31 f5       	brne	.+76     	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
				valor_eeprom = eeprom_read_byte((uint8_t*)12);
 716:	8c e0       	ldi	r24, 0x0C	; 12
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 71e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1A = valor_eeprom;
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 728:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				valor_eeprom = eeprom_read_byte((uint8_t*)13);
 72c:	8d e0       	ldi	r24, 0x0D	; 13
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 734:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR1B = valor_eeprom;
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 73e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				valor_eeprom = eeprom_read_byte((uint8_t*)14);
 742:	8e e0       	ldi	r24, 0x0E	; 14
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 74a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2A = valor_eeprom;
 74e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				valor_eeprom = eeprom_read_byte((uint8_t*)15);
 752:	8f e0       	ldi	r24, 0x0F	; 15
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 13 06 	call	0xc26	; 0xc26 <eeprom_read_byte>
 75a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				OCR2B = valor_eeprom;
 75e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				/*/leds_memoria();/*/
			}
		}
		
	}
}
 762:	ff 91       	pop	r31
 764:	ef 91       	pop	r30
 766:	bf 91       	pop	r27
 768:	af 91       	pop	r26
 76a:	9f 91       	pop	r25
 76c:	8f 91       	pop	r24
 76e:	7f 91       	pop	r23
 770:	6f 91       	pop	r22
 772:	5f 91       	pop	r21
 774:	4f 91       	pop	r20
 776:	3f 91       	pop	r19
 778:	2f 91       	pop	r18
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <init_PWM1_FAST>:
 */ 

#include "PWM1.h"

void init_PWM1_FAST(void){
	DDRB |= (1 << DDB1) | (1 << DDB2);
 784:	84 b1       	in	r24, 0x04	; 4
 786:	86 60       	ori	r24, 0x06	; 6
 788:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 0;
 78a:	e0 e8       	ldi	r30, 0x80	; 128
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	10 82       	st	Z, r1
	TCCR1B = 0;
 790:	a1 e8       	ldi	r26, 0x81	; 129
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	1c 92       	st	X, r1
	
	TCCR1A |= (1 << COM1A1);
 796:	80 81       	ld	r24, Z
 798:	80 68       	ori	r24, 0x80	; 128
 79a:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);  
 79c:	80 81       	ld	r24, Z
 79e:	80 62       	ori	r24, 0x20	; 32
 7a0:	80 83       	st	Z, r24
	
	TCCR1A |= (1<<WGM11);
 7a2:	80 81       	ld	r24, Z
 7a4:	82 60       	ori	r24, 0x02	; 2
 7a6:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13);
 7a8:	8c 91       	ld	r24, X
 7aa:	88 61       	ori	r24, 0x18	; 24
 7ac:	8c 93       	st	X, r24
	
	//Prescaler de 64
	TCCR1B |= (1<<CS11)|(1<<CS10);
 7ae:	8c 91       	ld	r24, X
 7b0:	83 60       	ori	r24, 0x03	; 3
 7b2:	8c 93       	st	X, r24
	
	//TOP de 1249
	ICR1H = 0x04;
 7b4:	84 e0       	ldi	r24, 0x04	; 4
 7b6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = 0xE1;
 7ba:	81 ee       	ldi	r24, 0xE1	; 225
 7bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 7c0:	08 95       	ret

000007c2 <updateDutyCicle1A>:
}

void updateDutyCicle1A(uint16_t duty){
// 	OCR1AH = (duty & 0xFF00) >> 8;
// 	OCR1AL = (duty & 0x00FF);
	OCR1A = duty;
 7c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7ca:	08 95       	ret

000007cc <updateDutyCicle1B>:
}

void updateDutyCicle1B(uint16_t duty){
// 	OCR1BH = (duty & 0xFF00) >> 8;
// 	OCR1BL = (duty & 0x00FF);
	OCR1B = duty;
 7cc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7d0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 7d4:	08 95       	ret

000007d6 <init_PWM2_FAST>:
 */ 

#include "PWM2.h"

void init_PWM2_FAST(void){
	DDRB |= (1 << DDB3);
 7d6:	84 b1       	in	r24, 0x04	; 4
 7d8:	88 60       	ori	r24, 0x08	; 8
 7da:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD3);
 7dc:	8a b1       	in	r24, 0x0a	; 10
 7de:	88 60       	ori	r24, 0x08	; 8
 7e0:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2A = 0;
 7e2:	e0 eb       	ldi	r30, 0xB0	; 176
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	10 82       	st	Z, r1
	TCCR2B = 0;
 7e8:	a1 eb       	ldi	r26, 0xB1	; 177
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	1c 92       	st	X, r1
	
	TCCR2A |= (1<<COM2A1);
 7ee:	80 81       	ld	r24, Z
 7f0:	80 68       	ori	r24, 0x80	; 128
 7f2:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B1);
 7f4:	80 81       	ld	r24, Z
 7f6:	80 62       	ori	r24, 0x20	; 32
 7f8:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 7fa:	80 81       	ld	r24, Z
 7fc:	83 60       	ori	r24, 0x03	; 3
 7fe:	80 83       	st	Z, r24
	
	//Prescaler de 256
	TCCR2B |= (1<<CS22)|(1<<CS21);
 800:	8c 91       	ld	r24, X
 802:	86 60       	ori	r24, 0x06	; 6
 804:	8c 93       	st	X, r24
 806:	08 95       	ret

00000808 <updateDutyCicle2A>:
}

void updateDutyCicle2A(uint8_t duty){
	OCR2A = duty;
 808:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 80c:	08 95       	ret

0000080e <updateDutyCicle2B>:
}

void updateDutyCicle2B(uint8_t duty){
	OCR2B = duty;
 80e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 812:	08 95       	ret

00000814 <__subsf3>:
 814:	50 58       	subi	r21, 0x80	; 128

00000816 <__addsf3>:
 816:	bb 27       	eor	r27, r27
 818:	aa 27       	eor	r26, r26
 81a:	0e 94 22 04 	call	0x844	; 0x844 <__addsf3x>
 81e:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_round>
 822:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_pscA>
 826:	38 f0       	brcs	.+14     	; 0x836 <__addsf3+0x20>
 828:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_pscB>
 82c:	20 f0       	brcs	.+8      	; 0x836 <__addsf3+0x20>
 82e:	39 f4       	brne	.+14     	; 0x83e <__addsf3+0x28>
 830:	9f 3f       	cpi	r25, 0xFF	; 255
 832:	19 f4       	brne	.+6      	; 0x83a <__addsf3+0x24>
 834:	26 f4       	brtc	.+8      	; 0x83e <__addsf3+0x28>
 836:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_nan>
 83a:	0e f4       	brtc	.+2      	; 0x83e <__addsf3+0x28>
 83c:	e0 95       	com	r30
 83e:	e7 fb       	bst	r30, 7
 840:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_inf>

00000844 <__addsf3x>:
 844:	e9 2f       	mov	r30, r25
 846:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_split3>
 84a:	58 f3       	brcs	.-42     	; 0x822 <__addsf3+0xc>
 84c:	ba 17       	cp	r27, r26
 84e:	62 07       	cpc	r22, r18
 850:	73 07       	cpc	r23, r19
 852:	84 07       	cpc	r24, r20
 854:	95 07       	cpc	r25, r21
 856:	20 f0       	brcs	.+8      	; 0x860 <__addsf3x+0x1c>
 858:	79 f4       	brne	.+30     	; 0x878 <__addsf3x+0x34>
 85a:	a6 f5       	brtc	.+104    	; 0x8c4 <__addsf3x+0x80>
 85c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_zero>
 860:	0e f4       	brtc	.+2      	; 0x864 <__addsf3x+0x20>
 862:	e0 95       	com	r30
 864:	0b 2e       	mov	r0, r27
 866:	ba 2f       	mov	r27, r26
 868:	a0 2d       	mov	r26, r0
 86a:	0b 01       	movw	r0, r22
 86c:	b9 01       	movw	r22, r18
 86e:	90 01       	movw	r18, r0
 870:	0c 01       	movw	r0, r24
 872:	ca 01       	movw	r24, r20
 874:	a0 01       	movw	r20, r0
 876:	11 24       	eor	r1, r1
 878:	ff 27       	eor	r31, r31
 87a:	59 1b       	sub	r21, r25
 87c:	99 f0       	breq	.+38     	; 0x8a4 <__addsf3x+0x60>
 87e:	59 3f       	cpi	r21, 0xF9	; 249
 880:	50 f4       	brcc	.+20     	; 0x896 <__addsf3x+0x52>
 882:	50 3e       	cpi	r21, 0xE0	; 224
 884:	68 f1       	brcs	.+90     	; 0x8e0 <__addsf3x+0x9c>
 886:	1a 16       	cp	r1, r26
 888:	f0 40       	sbci	r31, 0x00	; 0
 88a:	a2 2f       	mov	r26, r18
 88c:	23 2f       	mov	r18, r19
 88e:	34 2f       	mov	r19, r20
 890:	44 27       	eor	r20, r20
 892:	58 5f       	subi	r21, 0xF8	; 248
 894:	f3 cf       	rjmp	.-26     	; 0x87c <__addsf3x+0x38>
 896:	46 95       	lsr	r20
 898:	37 95       	ror	r19
 89a:	27 95       	ror	r18
 89c:	a7 95       	ror	r26
 89e:	f0 40       	sbci	r31, 0x00	; 0
 8a0:	53 95       	inc	r21
 8a2:	c9 f7       	brne	.-14     	; 0x896 <__addsf3x+0x52>
 8a4:	7e f4       	brtc	.+30     	; 0x8c4 <__addsf3x+0x80>
 8a6:	1f 16       	cp	r1, r31
 8a8:	ba 0b       	sbc	r27, r26
 8aa:	62 0b       	sbc	r22, r18
 8ac:	73 0b       	sbc	r23, r19
 8ae:	84 0b       	sbc	r24, r20
 8b0:	ba f0       	brmi	.+46     	; 0x8e0 <__addsf3x+0x9c>
 8b2:	91 50       	subi	r25, 0x01	; 1
 8b4:	a1 f0       	breq	.+40     	; 0x8de <__addsf3x+0x9a>
 8b6:	ff 0f       	add	r31, r31
 8b8:	bb 1f       	adc	r27, r27
 8ba:	66 1f       	adc	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	c2 f7       	brpl	.-16     	; 0x8b2 <__addsf3x+0x6e>
 8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <__addsf3x+0x9c>
 8c4:	ba 0f       	add	r27, r26
 8c6:	62 1f       	adc	r22, r18
 8c8:	73 1f       	adc	r23, r19
 8ca:	84 1f       	adc	r24, r20
 8cc:	48 f4       	brcc	.+18     	; 0x8e0 <__addsf3x+0x9c>
 8ce:	87 95       	ror	r24
 8d0:	77 95       	ror	r23
 8d2:	67 95       	ror	r22
 8d4:	b7 95       	ror	r27
 8d6:	f7 95       	ror	r31
 8d8:	9e 3f       	cpi	r25, 0xFE	; 254
 8da:	08 f0       	brcs	.+2      	; 0x8de <__addsf3x+0x9a>
 8dc:	b0 cf       	rjmp	.-160    	; 0x83e <__addsf3+0x28>
 8de:	93 95       	inc	r25
 8e0:	88 0f       	add	r24, r24
 8e2:	08 f0       	brcs	.+2      	; 0x8e6 <__addsf3x+0xa2>
 8e4:	99 27       	eor	r25, r25
 8e6:	ee 0f       	add	r30, r30
 8e8:	97 95       	ror	r25
 8ea:	87 95       	ror	r24
 8ec:	08 95       	ret

000008ee <__divsf3>:
 8ee:	0e 94 8b 04 	call	0x916	; 0x916 <__divsf3x>
 8f2:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_round>
 8f6:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_pscB>
 8fa:	58 f0       	brcs	.+22     	; 0x912 <__stack+0x13>
 8fc:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_pscA>
 900:	40 f0       	brcs	.+16     	; 0x912 <__stack+0x13>
 902:	29 f4       	brne	.+10     	; 0x90e <__stack+0xf>
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	29 f0       	breq	.+10     	; 0x912 <__stack+0x13>
 908:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_inf>
 90c:	51 11       	cpse	r21, r1
 90e:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_szero>
 912:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_nan>

00000916 <__divsf3x>:
 916:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_split3>
 91a:	68 f3       	brcs	.-38     	; 0x8f6 <__divsf3+0x8>

0000091c <__divsf3_pse>:
 91c:	99 23       	and	r25, r25
 91e:	b1 f3       	breq	.-20     	; 0x90c <__stack+0xd>
 920:	55 23       	and	r21, r21
 922:	91 f3       	breq	.-28     	; 0x908 <__stack+0x9>
 924:	95 1b       	sub	r25, r21
 926:	55 0b       	sbc	r21, r21
 928:	bb 27       	eor	r27, r27
 92a:	aa 27       	eor	r26, r26
 92c:	62 17       	cp	r22, r18
 92e:	73 07       	cpc	r23, r19
 930:	84 07       	cpc	r24, r20
 932:	38 f0       	brcs	.+14     	; 0x942 <__divsf3_pse+0x26>
 934:	9f 5f       	subi	r25, 0xFF	; 255
 936:	5f 4f       	sbci	r21, 0xFF	; 255
 938:	22 0f       	add	r18, r18
 93a:	33 1f       	adc	r19, r19
 93c:	44 1f       	adc	r20, r20
 93e:	aa 1f       	adc	r26, r26
 940:	a9 f3       	breq	.-22     	; 0x92c <__divsf3_pse+0x10>
 942:	35 d0       	rcall	.+106    	; 0x9ae <__divsf3_pse+0x92>
 944:	0e 2e       	mov	r0, r30
 946:	3a f0       	brmi	.+14     	; 0x956 <__divsf3_pse+0x3a>
 948:	e0 e8       	ldi	r30, 0x80	; 128
 94a:	32 d0       	rcall	.+100    	; 0x9b0 <__divsf3_pse+0x94>
 94c:	91 50       	subi	r25, 0x01	; 1
 94e:	50 40       	sbci	r21, 0x00	; 0
 950:	e6 95       	lsr	r30
 952:	00 1c       	adc	r0, r0
 954:	ca f7       	brpl	.-14     	; 0x948 <__divsf3_pse+0x2c>
 956:	2b d0       	rcall	.+86     	; 0x9ae <__divsf3_pse+0x92>
 958:	fe 2f       	mov	r31, r30
 95a:	29 d0       	rcall	.+82     	; 0x9ae <__divsf3_pse+0x92>
 95c:	66 0f       	add	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	bb 1f       	adc	r27, r27
 964:	26 17       	cp	r18, r22
 966:	37 07       	cpc	r19, r23
 968:	48 07       	cpc	r20, r24
 96a:	ab 07       	cpc	r26, r27
 96c:	b0 e8       	ldi	r27, 0x80	; 128
 96e:	09 f0       	breq	.+2      	; 0x972 <__divsf3_pse+0x56>
 970:	bb 0b       	sbc	r27, r27
 972:	80 2d       	mov	r24, r0
 974:	bf 01       	movw	r22, r30
 976:	ff 27       	eor	r31, r31
 978:	93 58       	subi	r25, 0x83	; 131
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	3a f0       	brmi	.+14     	; 0x98c <__divsf3_pse+0x70>
 97e:	9e 3f       	cpi	r25, 0xFE	; 254
 980:	51 05       	cpc	r21, r1
 982:	78 f0       	brcs	.+30     	; 0x9a2 <__divsf3_pse+0x86>
 984:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_inf>
 988:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_szero>
 98c:	5f 3f       	cpi	r21, 0xFF	; 255
 98e:	e4 f3       	brlt	.-8      	; 0x988 <__divsf3_pse+0x6c>
 990:	98 3e       	cpi	r25, 0xE8	; 232
 992:	d4 f3       	brlt	.-12     	; 0x988 <__divsf3_pse+0x6c>
 994:	86 95       	lsr	r24
 996:	77 95       	ror	r23
 998:	67 95       	ror	r22
 99a:	b7 95       	ror	r27
 99c:	f7 95       	ror	r31
 99e:	9f 5f       	subi	r25, 0xFF	; 255
 9a0:	c9 f7       	brne	.-14     	; 0x994 <__divsf3_pse+0x78>
 9a2:	88 0f       	add	r24, r24
 9a4:	91 1d       	adc	r25, r1
 9a6:	96 95       	lsr	r25
 9a8:	87 95       	ror	r24
 9aa:	97 f9       	bld	r25, 7
 9ac:	08 95       	ret
 9ae:	e1 e0       	ldi	r30, 0x01	; 1
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	bb 1f       	adc	r27, r27
 9b8:	62 17       	cp	r22, r18
 9ba:	73 07       	cpc	r23, r19
 9bc:	84 07       	cpc	r24, r20
 9be:	ba 07       	cpc	r27, r26
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__divsf3_pse+0xae>
 9c2:	62 1b       	sub	r22, r18
 9c4:	73 0b       	sbc	r23, r19
 9c6:	84 0b       	sbc	r24, r20
 9c8:	ba 0b       	sbc	r27, r26
 9ca:	ee 1f       	adc	r30, r30
 9cc:	88 f7       	brcc	.-30     	; 0x9b0 <__divsf3_pse+0x94>
 9ce:	e0 95       	com	r30
 9d0:	08 95       	ret

000009d2 <__fixunssfsi>:
 9d2:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_splitA>
 9d6:	88 f0       	brcs	.+34     	; 0x9fa <__fixunssfsi+0x28>
 9d8:	9f 57       	subi	r25, 0x7F	; 127
 9da:	98 f0       	brcs	.+38     	; 0xa02 <__fixunssfsi+0x30>
 9dc:	b9 2f       	mov	r27, r25
 9de:	99 27       	eor	r25, r25
 9e0:	b7 51       	subi	r27, 0x17	; 23
 9e2:	b0 f0       	brcs	.+44     	; 0xa10 <__fixunssfsi+0x3e>
 9e4:	e1 f0       	breq	.+56     	; 0xa1e <__fixunssfsi+0x4c>
 9e6:	66 0f       	add	r22, r22
 9e8:	77 1f       	adc	r23, r23
 9ea:	88 1f       	adc	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	1a f0       	brmi	.+6      	; 0x9f6 <__fixunssfsi+0x24>
 9f0:	ba 95       	dec	r27
 9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__fixunssfsi+0x14>
 9f4:	14 c0       	rjmp	.+40     	; 0xa1e <__fixunssfsi+0x4c>
 9f6:	b1 30       	cpi	r27, 0x01	; 1
 9f8:	91 f0       	breq	.+36     	; 0xa1e <__fixunssfsi+0x4c>
 9fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_zero>
 9fe:	b1 e0       	ldi	r27, 0x01	; 1
 a00:	08 95       	ret
 a02:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_zero>
 a06:	67 2f       	mov	r22, r23
 a08:	78 2f       	mov	r23, r24
 a0a:	88 27       	eor	r24, r24
 a0c:	b8 5f       	subi	r27, 0xF8	; 248
 a0e:	39 f0       	breq	.+14     	; 0xa1e <__fixunssfsi+0x4c>
 a10:	b9 3f       	cpi	r27, 0xF9	; 249
 a12:	cc f3       	brlt	.-14     	; 0xa06 <__fixunssfsi+0x34>
 a14:	86 95       	lsr	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b3 95       	inc	r27
 a1c:	d9 f7       	brne	.-10     	; 0xa14 <__fixunssfsi+0x42>
 a1e:	3e f4       	brtc	.+14     	; 0xa2e <__fixunssfsi+0x5c>
 a20:	90 95       	com	r25
 a22:	80 95       	com	r24
 a24:	70 95       	com	r23
 a26:	61 95       	neg	r22
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	8f 4f       	sbci	r24, 0xFF	; 255
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	08 95       	ret

00000a30 <__floatunsisf>:
 a30:	e8 94       	clt
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <__floatsisf+0x12>

00000a34 <__floatsisf>:
 a34:	97 fb       	bst	r25, 7
 a36:	3e f4       	brtc	.+14     	; 0xa46 <__floatsisf+0x12>
 a38:	90 95       	com	r25
 a3a:	80 95       	com	r24
 a3c:	70 95       	com	r23
 a3e:	61 95       	neg	r22
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	99 23       	and	r25, r25
 a48:	a9 f0       	breq	.+42     	; 0xa74 <__floatsisf+0x40>
 a4a:	f9 2f       	mov	r31, r25
 a4c:	96 e9       	ldi	r25, 0x96	; 150
 a4e:	bb 27       	eor	r27, r27
 a50:	93 95       	inc	r25
 a52:	f6 95       	lsr	r31
 a54:	87 95       	ror	r24
 a56:	77 95       	ror	r23
 a58:	67 95       	ror	r22
 a5a:	b7 95       	ror	r27
 a5c:	f1 11       	cpse	r31, r1
 a5e:	f8 cf       	rjmp	.-16     	; 0xa50 <__floatsisf+0x1c>
 a60:	fa f4       	brpl	.+62     	; 0xaa0 <__floatsisf+0x6c>
 a62:	bb 0f       	add	r27, r27
 a64:	11 f4       	brne	.+4      	; 0xa6a <__floatsisf+0x36>
 a66:	60 ff       	sbrs	r22, 0
 a68:	1b c0       	rjmp	.+54     	; 0xaa0 <__floatsisf+0x6c>
 a6a:	6f 5f       	subi	r22, 0xFF	; 255
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	16 c0       	rjmp	.+44     	; 0xaa0 <__floatsisf+0x6c>
 a74:	88 23       	and	r24, r24
 a76:	11 f0       	breq	.+4      	; 0xa7c <__floatsisf+0x48>
 a78:	96 e9       	ldi	r25, 0x96	; 150
 a7a:	11 c0       	rjmp	.+34     	; 0xa9e <__floatsisf+0x6a>
 a7c:	77 23       	and	r23, r23
 a7e:	21 f0       	breq	.+8      	; 0xa88 <__floatsisf+0x54>
 a80:	9e e8       	ldi	r25, 0x8E	; 142
 a82:	87 2f       	mov	r24, r23
 a84:	76 2f       	mov	r23, r22
 a86:	05 c0       	rjmp	.+10     	; 0xa92 <__floatsisf+0x5e>
 a88:	66 23       	and	r22, r22
 a8a:	71 f0       	breq	.+28     	; 0xaa8 <__floatsisf+0x74>
 a8c:	96 e8       	ldi	r25, 0x86	; 134
 a8e:	86 2f       	mov	r24, r22
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	2a f0       	brmi	.+10     	; 0xaa0 <__floatsisf+0x6c>
 a96:	9a 95       	dec	r25
 a98:	66 0f       	add	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	da f7       	brpl	.-10     	; 0xa96 <__floatsisf+0x62>
 aa0:	88 0f       	add	r24, r24
 aa2:	96 95       	lsr	r25
 aa4:	87 95       	ror	r24
 aa6:	97 f9       	bld	r25, 7
 aa8:	08 95       	ret

00000aaa <__fp_inf>:
 aaa:	97 f9       	bld	r25, 7
 aac:	9f 67       	ori	r25, 0x7F	; 127
 aae:	80 e8       	ldi	r24, 0x80	; 128
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	08 95       	ret

00000ab6 <__fp_nan>:
 ab6:	9f ef       	ldi	r25, 0xFF	; 255
 ab8:	80 ec       	ldi	r24, 0xC0	; 192
 aba:	08 95       	ret

00000abc <__fp_pscA>:
 abc:	00 24       	eor	r0, r0
 abe:	0a 94       	dec	r0
 ac0:	16 16       	cp	r1, r22
 ac2:	17 06       	cpc	r1, r23
 ac4:	18 06       	cpc	r1, r24
 ac6:	09 06       	cpc	r0, r25
 ac8:	08 95       	ret

00000aca <__fp_pscB>:
 aca:	00 24       	eor	r0, r0
 acc:	0a 94       	dec	r0
 ace:	12 16       	cp	r1, r18
 ad0:	13 06       	cpc	r1, r19
 ad2:	14 06       	cpc	r1, r20
 ad4:	05 06       	cpc	r0, r21
 ad6:	08 95       	ret

00000ad8 <__fp_round>:
 ad8:	09 2e       	mov	r0, r25
 ada:	03 94       	inc	r0
 adc:	00 0c       	add	r0, r0
 ade:	11 f4       	brne	.+4      	; 0xae4 <__fp_round+0xc>
 ae0:	88 23       	and	r24, r24
 ae2:	52 f0       	brmi	.+20     	; 0xaf8 <__fp_round+0x20>
 ae4:	bb 0f       	add	r27, r27
 ae6:	40 f4       	brcc	.+16     	; 0xaf8 <__fp_round+0x20>
 ae8:	bf 2b       	or	r27, r31
 aea:	11 f4       	brne	.+4      	; 0xaf0 <__fp_round+0x18>
 aec:	60 ff       	sbrs	r22, 0
 aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__fp_round+0x20>
 af0:	6f 5f       	subi	r22, 0xFF	; 255
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	08 95       	ret

00000afa <__fp_split3>:
 afa:	57 fd       	sbrc	r21, 7
 afc:	90 58       	subi	r25, 0x80	; 128
 afe:	44 0f       	add	r20, r20
 b00:	55 1f       	adc	r21, r21
 b02:	59 f0       	breq	.+22     	; 0xb1a <__fp_splitA+0x10>
 b04:	5f 3f       	cpi	r21, 0xFF	; 255
 b06:	71 f0       	breq	.+28     	; 0xb24 <__fp_splitA+0x1a>
 b08:	47 95       	ror	r20

00000b0a <__fp_splitA>:
 b0a:	88 0f       	add	r24, r24
 b0c:	97 fb       	bst	r25, 7
 b0e:	99 1f       	adc	r25, r25
 b10:	61 f0       	breq	.+24     	; 0xb2a <__fp_splitA+0x20>
 b12:	9f 3f       	cpi	r25, 0xFF	; 255
 b14:	79 f0       	breq	.+30     	; 0xb34 <__fp_splitA+0x2a>
 b16:	87 95       	ror	r24
 b18:	08 95       	ret
 b1a:	12 16       	cp	r1, r18
 b1c:	13 06       	cpc	r1, r19
 b1e:	14 06       	cpc	r1, r20
 b20:	55 1f       	adc	r21, r21
 b22:	f2 cf       	rjmp	.-28     	; 0xb08 <__fp_split3+0xe>
 b24:	46 95       	lsr	r20
 b26:	f1 df       	rcall	.-30     	; 0xb0a <__fp_splitA>
 b28:	08 c0       	rjmp	.+16     	; 0xb3a <__fp_splitA+0x30>
 b2a:	16 16       	cp	r1, r22
 b2c:	17 06       	cpc	r1, r23
 b2e:	18 06       	cpc	r1, r24
 b30:	99 1f       	adc	r25, r25
 b32:	f1 cf       	rjmp	.-30     	; 0xb16 <__fp_splitA+0xc>
 b34:	86 95       	lsr	r24
 b36:	71 05       	cpc	r23, r1
 b38:	61 05       	cpc	r22, r1
 b3a:	08 94       	sec
 b3c:	08 95       	ret

00000b3e <__fp_zero>:
 b3e:	e8 94       	clt

00000b40 <__fp_szero>:
 b40:	bb 27       	eor	r27, r27
 b42:	66 27       	eor	r22, r22
 b44:	77 27       	eor	r23, r23
 b46:	cb 01       	movw	r24, r22
 b48:	97 f9       	bld	r25, 7
 b4a:	08 95       	ret

00000b4c <__mulsf3>:
 b4c:	0e 94 b9 05 	call	0xb72	; 0xb72 <__mulsf3x>
 b50:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_round>
 b54:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_pscA>
 b58:	38 f0       	brcs	.+14     	; 0xb68 <__mulsf3+0x1c>
 b5a:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_pscB>
 b5e:	20 f0       	brcs	.+8      	; 0xb68 <__mulsf3+0x1c>
 b60:	95 23       	and	r25, r21
 b62:	11 f0       	breq	.+4      	; 0xb68 <__mulsf3+0x1c>
 b64:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_inf>
 b68:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_nan>
 b6c:	11 24       	eor	r1, r1
 b6e:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_szero>

00000b72 <__mulsf3x>:
 b72:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_split3>
 b76:	70 f3       	brcs	.-36     	; 0xb54 <__mulsf3+0x8>

00000b78 <__mulsf3_pse>:
 b78:	95 9f       	mul	r25, r21
 b7a:	c1 f3       	breq	.-16     	; 0xb6c <__mulsf3+0x20>
 b7c:	95 0f       	add	r25, r21
 b7e:	50 e0       	ldi	r21, 0x00	; 0
 b80:	55 1f       	adc	r21, r21
 b82:	62 9f       	mul	r22, r18
 b84:	f0 01       	movw	r30, r0
 b86:	72 9f       	mul	r23, r18
 b88:	bb 27       	eor	r27, r27
 b8a:	f0 0d       	add	r31, r0
 b8c:	b1 1d       	adc	r27, r1
 b8e:	63 9f       	mul	r22, r19
 b90:	aa 27       	eor	r26, r26
 b92:	f0 0d       	add	r31, r0
 b94:	b1 1d       	adc	r27, r1
 b96:	aa 1f       	adc	r26, r26
 b98:	64 9f       	mul	r22, r20
 b9a:	66 27       	eor	r22, r22
 b9c:	b0 0d       	add	r27, r0
 b9e:	a1 1d       	adc	r26, r1
 ba0:	66 1f       	adc	r22, r22
 ba2:	82 9f       	mul	r24, r18
 ba4:	22 27       	eor	r18, r18
 ba6:	b0 0d       	add	r27, r0
 ba8:	a1 1d       	adc	r26, r1
 baa:	62 1f       	adc	r22, r18
 bac:	73 9f       	mul	r23, r19
 bae:	b0 0d       	add	r27, r0
 bb0:	a1 1d       	adc	r26, r1
 bb2:	62 1f       	adc	r22, r18
 bb4:	83 9f       	mul	r24, r19
 bb6:	a0 0d       	add	r26, r0
 bb8:	61 1d       	adc	r22, r1
 bba:	22 1f       	adc	r18, r18
 bbc:	74 9f       	mul	r23, r20
 bbe:	33 27       	eor	r19, r19
 bc0:	a0 0d       	add	r26, r0
 bc2:	61 1d       	adc	r22, r1
 bc4:	23 1f       	adc	r18, r19
 bc6:	84 9f       	mul	r24, r20
 bc8:	60 0d       	add	r22, r0
 bca:	21 1d       	adc	r18, r1
 bcc:	82 2f       	mov	r24, r18
 bce:	76 2f       	mov	r23, r22
 bd0:	6a 2f       	mov	r22, r26
 bd2:	11 24       	eor	r1, r1
 bd4:	9f 57       	subi	r25, 0x7F	; 127
 bd6:	50 40       	sbci	r21, 0x00	; 0
 bd8:	9a f0       	brmi	.+38     	; 0xc00 <__mulsf3_pse+0x88>
 bda:	f1 f0       	breq	.+60     	; 0xc18 <__mulsf3_pse+0xa0>
 bdc:	88 23       	and	r24, r24
 bde:	4a f0       	brmi	.+18     	; 0xbf2 <__mulsf3_pse+0x7a>
 be0:	ee 0f       	add	r30, r30
 be2:	ff 1f       	adc	r31, r31
 be4:	bb 1f       	adc	r27, r27
 be6:	66 1f       	adc	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	91 50       	subi	r25, 0x01	; 1
 bee:	50 40       	sbci	r21, 0x00	; 0
 bf0:	a9 f7       	brne	.-22     	; 0xbdc <__mulsf3_pse+0x64>
 bf2:	9e 3f       	cpi	r25, 0xFE	; 254
 bf4:	51 05       	cpc	r21, r1
 bf6:	80 f0       	brcs	.+32     	; 0xc18 <__mulsf3_pse+0xa0>
 bf8:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_inf>
 bfc:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_szero>
 c00:	5f 3f       	cpi	r21, 0xFF	; 255
 c02:	e4 f3       	brlt	.-8      	; 0xbfc <__mulsf3_pse+0x84>
 c04:	98 3e       	cpi	r25, 0xE8	; 232
 c06:	d4 f3       	brlt	.-12     	; 0xbfc <__mulsf3_pse+0x84>
 c08:	86 95       	lsr	r24
 c0a:	77 95       	ror	r23
 c0c:	67 95       	ror	r22
 c0e:	b7 95       	ror	r27
 c10:	f7 95       	ror	r31
 c12:	e7 95       	ror	r30
 c14:	9f 5f       	subi	r25, 0xFF	; 255
 c16:	c1 f7       	brne	.-16     	; 0xc08 <__mulsf3_pse+0x90>
 c18:	fe 2b       	or	r31, r30
 c1a:	88 0f       	add	r24, r24
 c1c:	91 1d       	adc	r25, r1
 c1e:	96 95       	lsr	r25
 c20:	87 95       	ror	r24
 c22:	97 f9       	bld	r25, 7
 c24:	08 95       	ret

00000c26 <eeprom_read_byte>:
 c26:	f9 99       	sbic	0x1f, 1	; 31
 c28:	fe cf       	rjmp	.-4      	; 0xc26 <eeprom_read_byte>
 c2a:	92 bd       	out	0x22, r25	; 34
 c2c:	81 bd       	out	0x21, r24	; 33
 c2e:	f8 9a       	sbi	0x1f, 0	; 31
 c30:	99 27       	eor	r25, r25
 c32:	80 b5       	in	r24, 0x20	; 32
 c34:	08 95       	ret

00000c36 <eeprom_write_byte>:
 c36:	26 2f       	mov	r18, r22

00000c38 <eeprom_write_r18>:
 c38:	f9 99       	sbic	0x1f, 1	; 31
 c3a:	fe cf       	rjmp	.-4      	; 0xc38 <eeprom_write_r18>
 c3c:	1f ba       	out	0x1f, r1	; 31
 c3e:	92 bd       	out	0x22, r25	; 34
 c40:	81 bd       	out	0x21, r24	; 33
 c42:	20 bd       	out	0x20, r18	; 32
 c44:	0f b6       	in	r0, 0x3f	; 63
 c46:	f8 94       	cli
 c48:	fa 9a       	sbi	0x1f, 2	; 31
 c4a:	f9 9a       	sbi	0x1f, 1	; 31
 c4c:	0f be       	out	0x3f, r0	; 63
 c4e:	01 96       	adiw	r24, 0x01	; 1
 c50:	08 95       	ret

00000c52 <_exit>:
 c52:	f8 94       	cli

00000c54 <__stop_program>:
 c54:	ff cf       	rjmp	.-2      	; 0xc54 <__stop_program>
